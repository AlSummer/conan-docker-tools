
def readConanVersion() {
}

// These are things to parameterize/read/write from/to .env file
String conanVersion = null
List gccVersions = ['5', '6', '7', '8', '9', '10', '11']
List clangVersions = ['10', '11', '12']

def docker_compose_build(String image, String conan_version) {
    // Just to be sure we use the expected Conan version
    withEnv(["CONAN_VERSION=${conan_version}"]) {
        sh "docker-compose build $image"
    }
}

node('Linux') {
    stage('Checkout the sources') {
        checkout scm
    }

    stage('Input arguments') {
        // Get Conan version from file
        String content = readFile('modern/.env')
        def matcher = content =~ /CONAN_VERSION=([\d.]+)/
        conanVersion = matcher[0][1]
        echo "Found Conan version: ${conanVersion}"
    }

    stage('Detect changes') {
    // TODO: Dependending on the files affected by the PR we might want to run
    //   some building or other
    }

    stage('Install requirements') {
        sh 'pip install docker-compose'
    }

    stage('Xenial - Build base image') {
        dir('modern') {
            docker_compose_build('base', conanVersion)
            echo "pytest tests --image docker.io/conanio/base-ubuntu16.04:${conanVersion} --service base"
        }
    }

    // Build GCC in parallel
    Map gccBuilds = [:]
    gccVersions.each { v ->
        String gccVersion = v
        gccBuilds["GCC ${gccVersion}"] = {
            stage("GCC ${gccVersion} deploy") {
                echo "docker-compose build gcc${gccVersion}"
                echo "pytest tests --image docker.io/conanio/gcc${gccVersion}-ubuntu16.04:${conanVersion} --service deploy"
            }
            stage("GCC ${gccVersion} jenkins") {
                echo "docker-compose build gcc${gccVersion}-jenkins"
                echo "pytest tests --image docker.io/conanio/gcc${gccVersion}-ubuntu16.04-jenkins:${conanVersion} --service jenkins"
            }
        }
    }
    gccBuilds.failFast = true
    parallel(gccBuilds)

    stage('Run GCC xtests') {
        echo 'Run tests that check binaries work in compatible images'
    }

    // Build Clang in parallel
    Map clangBuilds = [:]
    clangVersions.each { v ->
        String clangVersion = v
        clangBuilds["Clang ${clangVersion}"] = {
            stage("Clang ${clangVersion} deploy") {
                echo "docker-compose build clang${clangVersion}"
                echo "pytest tests --image docker.io/conanio/clang${clangVersion}-ubuntu16.04:${conanVersion} --service deploy"
            }
            stage("Clang ${clangVersion} jenkins") {
                echo "docker-compose build clang${clangVersion}-jenkins"
                echo "pytest tests --image docker.io/conanio/clang${clangVersion}-ubuntu16.04-jenkins:${conanVersion} --service jenkins"
            }
        }
    }
    clangBuilds.failFast = true
    parallel(clangBuilds)

    stage('Run Clang xtests') {
        echo 'Run tests that check binaries work in compatible images'
    }

    // TODO: If master branch
    stage('Upload images') {
        echo 'Upload images'
    }
}
